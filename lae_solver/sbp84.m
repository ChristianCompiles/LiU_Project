function [P, D] = sbp84(N, dx)
%
%  Create a 8-4 SBP operator that is eighth order
%  in the interior with a fourth order boundary closure
%  on the interval [a,b].
%
%  This creates full matrices for ease of use but
%  could use sparse matrices if speed is desired
%  (see commented code at the end of the file).
%
%  Coefficients come from the paper where, note, the integration
%  matrix P is referred to as H:
%
%  Mattsson, Nordstr√∂m (2004)
%   "Summation by parts operators for finite difference 
%    approximations of second derivatives."
%   Journal of Computational Physics 199, pp. 503-540.
%  
%  INPUT:  N  - number of uniform discretization points
%          dx - grid spacing defined by (b-a) / (N-1) 
%
%  OUTPUT: P - integration matrix
%          D - derivative matrix
%

    % Check that it is possible to create the operator
    if N < 16
       error("Must use N >= 16 to construct the 8-4 SBP operator.")
    end

    % For convenience create P matrix and its inverse
    P = diag(ones(N,1),0);
    P(1:8,1:8)=diag([1498139/5080320, ...
                     1107307/725760, ...
                     20761/80640, ...
                     1304999/725760, ...
                     299527/725760, ...
                     103097/80640, ...
                     670091/725760, ...
                     5127739/5080320]);
    % Reverse the order of the quadrature weights at the other boundary
    P(N-7:N,N-7:N)=fliplr(flipud(diag([1498139/5080320, ...
                                       1107307/725760, ...
                                       20761/80640, ...
                                       1304999/725760, ...
                                       299527/725760, ...
                                       103097/80640, ...
                                       670091/725760, ...
                                       5127739/5080320])));
    P = dx * P;
    % Pinv = diag(1 ./ diag(P)); % unused

    % Standard eighth order central stencil for the interior
    D = -1/280 * diag(ones(N-4,1), 4) ...
        +4/105 * diag(ones(N-3,1), 3) ...
        -1/5   * diag(ones(N-2,1), 2) ...
        +4/5   * diag(ones(N-1,1), 1) ...
        -4/5   * diag(ones(N-1,1),-1) ...
        +1/5   * diag(ones(N-2,1),-2) ...
        -4/105 * diag(ones(N-3,1),-3) ...
        +1/280 * diag(ones(N-4,1),-4);

    % These boundary closures give a matrix that is significantly less
    % stiff. These three values have been optimized to make the spectrum
    % "nicer"
    r67=0.69789473684211;  
    r68=-0.12052631578947;   
    r78=0.75868421052632;
   
    D(1:8,1:12)=[-2540160/1498139, -142642467/5992556+50803200/1498139*r78+5080320/1498139*r67+25401600/1498139*r68, 705710031/5992556-228614400/1498139*r78-25401600/1498139*r67-121927680/1498139*r68, -3577778591/17977668+381024000/1498139*r78+50803200/1498139*r67+228614400/1498139*r68, 203718909/1498139-254016000/1498139*r78-50803200/1498139*r67-203212800/1498139*r68, -32111205/5992556+25401600/1498139*r67+76204800/1498139*r68, -652789417/17977668+76204800/1498139*r78-5080320/1498139*r67, 74517981/5992556-25401600/1498139*r78-5080320/1498139*r68, 0, 0, 0, 0;
                  142642467/31004596-7257600/1107307*r78-725760/1107307*r67-3628800/1107307*r68, 0, -141502371/2214614+91445760/1107307*r78+10886400/1107307*r67+50803200/1107307*r68, 159673719/1107307-203212800/1107307*r78-29030400/1107307*r67-127008000/1107307*r68, -1477714693/13287684+152409600/1107307*r78+32659200/1107307*r67+127008000/1107307*r68, 11652351/2214614-17418240/1107307*r67-50803200/1107307*r68, 36069450/1107307-50803200/1107307*r78+3628800/1107307*r67, -536324953/46506894+17418240/1107307*r78+3628800/1107307*r68, 0, 0, 0, 0;
                 -18095129/134148+3628800/20761*r78+403200/20761*r67+1935360/20761*r68, 47167457/124566-10160640/20761*r78-1209600/20761*r67-5644800/20761*r68, 0, -120219461/124566+25401600/20761*r78+4032000/20761*r67+16934400/20761*r68, 249289259/249132-25401600/20761*r78-6048000/20761*r67-22579200/20761*r68, -2611503/41522+3628800/20761*r67+10160640/20761*r68, -7149666/20761+10160640/20761*r78-806400/20761*r67, 37199165/290654-3628800/20761*r78-806400/20761*r68, 0, 0, 0, 0;
                  3577778591/109619916-54432000/1304999*r78-7257600/1304999*r67-32659200/1304999*r68, -159673719/1304999+203212800/1304999*r78+29030400/1304999*r67+127008000/1304999*r68, 360658383/2609998-228614400/1304999*r78-36288000/1304999*r67-152409600/1304999*r68, 0, -424854441/5219996+127008000/1304999*r78+36288000/1304999*r67+127008000/1304999*r68, 22885113/2609998-29030400/1304999*r67-76204800/1304999*r68, 158096578/3914997-76204800/1304999*r78+7257600/1304999*r67, -296462325/18269986+29030400/1304999*r78+7257600/1304999*r68, 0, 0, 0, 0;
                 -203718909/2096689+36288000/299527*r78+7257600/299527*r67+29030400/299527*r68, 1477714693/3594324-152409600/299527*r78-32659200/299527*r67-127008000/299527*r68, -747867777/1198108+228614400/299527*r78+54432000/299527*r67+203212800/299527*r68, 424854441/1198108-127008000/299527*r78-36288000/299527*r67-127008000/299527*r68, 0, -17380335/1198108+10886400/299527*r67+25401600/299527*r68, -67080435/1198108+25401600/299527*r78-3628800/299527*r67, 657798011/25160268-10886400/299527*r78-3628800/299527*r68, -2592/299527, 0, 0, 0;
                  1529105/1237164-403200/103097*r67-1209600/103097*r68, -3884117/618582+1935360/103097*r67+5644800/103097*r68, 2611503/206194-3628800/103097*r67-10160640/103097*r68, -7628371/618582+3225600/103097*r67+8467200/103097*r68, 5793445/1237164-1209600/103097*r67-2822400/103097*r68, 0, 80640/103097*r67, 80640/103097*r68, 3072/103097, -288/103097, 0, 0;
                  93255631/8041092-10886400/670091*r78+725760/670091*r67, -36069450/670091+50803200/670091*r78-3628800/670091*r67, 64346994/670091-91445760/670091*r78+7257600/670091*r67, -158096578/2010273+76204800/670091*r78-7257600/670091*r67, 67080435/2680364-25401600/670091*r78+3628800/670091*r67, -725760/670091*r67, 0, 725760/670091*r78, -145152/670091, 27648/670091, -2592/670091, 0;
                 -3921999/1079524+25401600/5127739*r78+5080320/5127739*r68, 536324953/30766434-121927680/5127739*r78-25401600/5127739*r68, -334792485/10255478+228614400/5127739*r78+50803200/5127739*r68, 296462325/10255478-203212800/5127739*r78-50803200/5127739*r68, -657798011/61532868+76204800/5127739*r78+25401600/5127739*r68, -5080320/5127739*r68, -5080320/5127739*r78, 0, 4064256/5127739, -1016064/5127739, 193536/5127739, -18144/5127739];
    D(N-7:N,N-11:N)=rot90( -D(1:8,1:12), 2);

    % OBS! This matrix has a very stiff spectrum at the point of being
    %      almost unusable
    %
    % % Create the somewhat ugly boundary closures on the left
    % D(1:8, 1:12)=[-2540160/1498139, 5544277/5992556, 198794991/29962780, -256916579/17977668, 20708767/1498139, -41004357/5992556, 27390659/17977668, -2323531/29962780, 0, 0, 0, 0;
    %               -5544277/31004596, 0, -85002381/22146140, 49607267/4429228, -165990199/13287684, 7655859/1107307, -7568311/4429228, 48319961/465068940, 0, 0, 0, 0;
    %               -66264997/8719620, 9444709/415220, 0, -20335981/249132, 32320879/249132, -35518713/415220, 2502774/103805, -3177073/1743924, 0, 0, 0, 0;
    %                256916579/109619916, -49607267/5219996, 61007943/5219996, 0, -68748371/5219996, 65088123/5219996, -66558305/15659988, 3870214/9134993, 0, 0, 0, 0;
    %               -20708767/2096689, 165990199/3594324, -96962637/1198108, 68748371/1198108, 0, -27294549/1198108, 14054993/1198108, -42678199/25160268, -2592/299527, 0, 0, 0;
    %                13668119/8660148, -850651/103097, 35518713/2061940, -21696041/1237164, 9098183/1237164, 0, -231661/412388, 7120007/43300740, 3072/103097, -288/103097, 0, 0;
    %               -27390659/56287644, 7568311/2680364, -22524966/3350455, 66558305/8041092, -14054993/2680364, 2084949/2680364, 0, 70710683/93812740, -145152/670091, 27648/670091, -2592/670091, 0;
    %                2323531/102554780, -48319961/307664340, 9531219/20510956, -3870214/5127739, 2246221/3238572, -21360021/102554780, -70710683/102554780, 0, 4064256/5127739, -1016064/5127739, 193536/5127739, -18144/5127739];
    % 
    % % Reverse the order and flip the sign of the boundary closure on the right
    % D(N-7:N, N-11:N)=flipud(fliplr(-D(1:8,1:12)));

    % Scale by the grid spacing
    D = D / dx;

    % Q = P*D; % unused to create the unweighted differencing matrix
end

%%
% original sparse implementation saved for reference.
    % % For convenience create P matrix and its inverse
    % P = diag(ones(N,1),0);
    % P(1:8,1:8)=diag([1498139/5080320, ...
    %                  1107307/725760, ...
    %                  20761/80640, ...
    %                  1304999/725760, ...
    %                  299527/725760, ...
    %                  103097/80640, ...
    %                  670091/725760, ...
    %                  5127739/5080320]);
    % % Reverse the order of the quadrature weights at the other boundary
    % P(N-7:N,N-7:N)=fliplr(flipud(diag([1498139/5080320, ...
    %                                    1107307/725760, ...
    %                                    20761/80640, ...
    %                                    1304999/725760, ...
    %                                    299527/725760, ...
    %                                    103097/80640, ...
    %                                    670091/725760, ...
    %                                    5127739/5080320])));
    % P = sparse(dx * P);
    % 
    % % Standard eighth order central stencil for the interior
    % D = -1/280 * diag(ones(N-4,1), 4) ...
    %     +4/105 * diag(ones(N-3,1), 3) ...
    %     -1/5   * diag(ones(N-2,1), 2) ...
    %     +4/5   * diag(ones(N-1,1), 1) ...
    %     -4/5   * diag(ones(N-1,1),-1) ...
    %     +1/5   * diag(ones(N-2,1),-2) ...
    %     -4/105 * diag(ones(N-3,1),-3) ...
    %     +1/280 * diag(ones(N-4,1),-4);
    % 
    % % Create the somewhat ugly boundary closures on the left
    % D(1:8, 1:12)=[-2540160/1498139, 5544277/5992556, 198794991/29962780, -256916579/17977668, 20708767/1498139, -41004357/5992556, 27390659/17977668, -2323531/29962780, 0, 0, 0, 0;
    %               -5544277/31004596, 0, -85002381/22146140, 49607267/4429228, -165990199/13287684, 7655859/1107307, -7568311/4429228, 48319961/465068940, 0, 0, 0, 0;
    %               -66264997/8719620, 9444709/415220, 0, -20335981/249132, 32320879/249132, -35518713/415220, 2502774/103805, -3177073/1743924, 0, 0, 0, 0;
    %                256916579/109619916, -49607267/5219996, 61007943/5219996, 0, -68748371/5219996, 65088123/5219996, -66558305/15659988, 3870214/9134993, 0, 0, 0, 0;
    %               -20708767/2096689, 165990199/3594324, -96962637/1198108, 68748371/1198108, 0, -27294549/1198108, 14054993/1198108, -42678199/25160268, -2592/299527, 0, 0, 0;
    %                13668119/8660148, -850651/103097, 35518713/2061940, -21696041/1237164, 9098183/1237164, 0, -231661/412388, 7120007/43300740, 3072/103097, -288/103097, 0, 0;
    %               -27390659/56287644, 7568311/2680364, -22524966/3350455, 66558305/8041092, -14054993/2680364, 2084949/2680364, 0, 70710683/93812740, -145152/670091, 27648/670091, -2592/670091, 0;
    %                2323531/102554780, -48319961/307664340, 9531219/20510956, -3870214/5127739, 2246221/3238572, -21360021/102554780, -70710683/102554780, 0, 4064256/5127739, -1016064/5127739, 193536/5127739, -18144/5127739];
    % 
    % % Reverse the order and flip the sign of the boundary closure on the right
    % D(N-7:N, N-11:N)=flipud(fliplr(-D(1:8,1:12)));
    %
    % Scale by the grid spacing
    % D = sparse(D / dx);
    